#include "trecvdatascheduler.h"
#include <QtCore>
#include <windows.h>
#include "structures.h"
#include "globals.hpp"

DWORD dwPlayers[MAX_PLAYERS];

tRecvDataScheduler::tRecvDataScheduler(QObject *parent) : QThread(parent)
{
}

void tRecvDataScheduler::run()
{
    DWORD dwRecvIdFrom;
    DWORD dwRecvIdTo;
    DWORD dwRecvDataSize;

    _MP_SESSION_PACKET *lpRecvData;
    _TX_PING *lpTXPing;
    _MP_SETUP_CHAT_RESP *lpMPChatCounter;
    _MP_SETUP_CHAT *lpMPChatMsg;
    _MP_SETUP_DATA *lpMPSetupData, *lpRecvMPSetupData;

    DWORD dwPlayerPing;

    BOOL ConnectionStatus = TRUE;

    char *lpszChatMessage;
    int i;

    int dwCurrentTimeStamp = 0;
    int dwLastRecvTimeStamp;

    dwLastRecvTimeStamp = ptimeGetTime();

    while(ConnectionStatus){
        Sleep(1);
        pRecvMsg(&dwRecvIdFrom,&dwRecvIdTo,NULL,&dwRecvDataSize);
        lpRecvData = (_MP_SESSION_PACKET*)GlobalAlloc(GPTR,dwRecvDataSize);

        if(pRecvMsg(&dwRecvIdFrom,&dwRecvIdTo,lpRecvData,&dwRecvDataSize)==ERROR_SUCCESS){
            dwLastRecvTimeStamp = ptimeGetTime();
            switch(lpRecvData->bMsgType){ //¿Necesitamos a Game Start?
            case TX_PING:
                lpTXPing = (_TX_PING*)lpRecvData;
                lpTXPing->dwMsgType = TX_PONG;
                pSendMsg(DPID,dwRecvIdFrom,lpTXPing,sizeof _TX_PING);

                lpTXPing->dwMsgType = TX_PING;
                lpTXPing->dwTime = ptimeGetTime();
                pSendMsg(DPID,dwRecvIdFrom,lpTXPing,sizeof _TX_PING);
                break;

            case TX_PONG:
                lpTXPing = (_TX_PING*)lpRecvData;
                dwPlayerPing = ptimeGetTime();
                if(dwPlayerPing>lpTXPing->dwTime){
                    dwPlayerPing -= lpTXPing->dwTime;
                } else {
                    dwPlayerPing += (~lpTXPing->dwTime)+1;
                }

                i = 0;
                while(dwPlayers[i]!=dwRecvIdFrom && i<MAX_PLAYERS) i++;
                if(i<MAX_PLAYERS)
                    UpdatePlayerInformation(PING,i,(char*)dwPlayerPing,0);
                break;

            case MP_SETUP_SCREEN:
                i = 0;
                while(dwPlayers[i]!=dwRecvIdFrom && i<MAX_PLAYERS) i++;

                if(i<MAX_PLAYERS){
                    switch(lpRecvData->bMsgSubType){
                    case MP_SETUP_SCREEN_IS_PLAYER_ALIVE:
                        lpRecvData->dwReserved2 = 0xFFFFFFFF;
                        pSendMsg(DPID,dwRecvIdFrom,lpRecvData,sizeof _MP_SESSION_PACKET);
                        break;

                    case MP_SETUP_SCREEN_CIV:
                        UpdatePlayerInformation(CIV,i,(char*)lpRecvData->dwId,0);
                        break;

                    case MP_SETUP_SCREEN_COLOR:
                        UpdatePlayerInformation(COLOR,i,(char*)lpRecvData->dwId,0);
                        break;

                    case MP_SETUP_SCREEN_TEAM:
                        UpdatePlayerInformation(TEAM,i,(char*)lpRecvData->dwId,0);
                        break;
                    }
                }
                break;

            case MP_SETUP_CHAT:
                lpMPChatMsg = (_MP_SETUP_CHAT*)lpRecvData;

                i = 0;
                while(dwPlayers[i]!=dwRecvIdFrom && i<MAX_PLAYERS) i++;

                if(i<MAX_PLAYERS){
                    if(i==lpMPChatMsg->bPlayerSource-1){
                        lpszChatMessage = (char*)GlobalAlloc(GPTR,FULL_CHAT_MESSAGE_LENGTH);
                        pGetPlayerName(dwRecvIdFrom,lpszChatMessage);

                        strcat(lpszChatMessage,": ");
                        strcat(lpszChatMessage,(const char*)&lpMPChatMsg->szChatMessage);

                        UpdatePlayerInformation(CHAT,0,lpszChatMessage,strlen(lpszChatMessage));

                        GlobalFree(lpszChatMessage);

                        lpMPChatCounter = (_MP_SETUP_CHAT_RESP*)lpRecvData;
                        lpMPChatCounter->dwMsgType = MP_SETUP_CHAT_RESP;
                        lpMPChatCounter->dwChatCounter = lpMPChatMsg->dwChatCounter;
                        pSendMsg(DPID,dwRecvIdFrom,lpMPChatCounter,sizeof _MP_SETUP_CHAT_RESP);
                    }
                }
                break;

            case MP_SETUP_PLAYER_READY:
                i = 0;
                while(dwPlayers[i]!=dwRecvIdFrom && i<MAX_PLAYERS) i++;

                if(lpRecvData->bMsgSubType==1){
                    if(lpRecvData->dwId==0 && i<MAX_PLAYERS){
                        if(lpRecvData->dwReserved2==STATUS_READY){
                            UpdatePlayerInformation(STATUS,i,(CHAR*)TRUE,0);
                        } else {
                            UpdatePlayerInformation(STATUS,i,(CHAR*)FALSE,0);
                        }
                    }
                } else {
                    UpdatePlayerInformation(VERSION,i,(CHAR*)lpRecvData->dwReserved,0);
                }
                break;

            case MP_SETUP_DATA:
                lpRecvMPSetupData = (_MP_SETUP_DATA*)lpRecvData;
                if(lpRecvMPSetupData->dwPlayerId[0]==dwRecvIdFrom){
                    memcpy(&dwPlayers,&lpRecvMPSetupData->dwPlayerId,MAX_PLAYERS*4);
                    //Actualizamos settings, lista de jugadores, etc...
                    lpMPSetupData = (_MP_SETUP_DATA*)GlobalAlloc(GPTR,dwRecvDataSize);
                    memmove(lpMPSetupData,lpRecvData,dwRecvDataSize);
                    ReceivedData((int)lpMPSetupData);
                }
                break;

            }
        }
        GlobalFree(lpRecvData);
        dwCurrentTimeStamp = ptimeGetTime();
        if(dwCurrentTimeStamp>dwLastRecvTimeStamp){
            dwCurrentTimeStamp -= dwLastRecvTimeStamp;
        } else {
            dwCurrentTimeStamp += (~dwLastRecvTimeStamp)+1;
        }
        if(dwCurrentTimeStamp>=15000) ConnectionStatus = FALSE;
    }
    CloseChat();
}

void tRecvDataScheduler::UpdatePlayerInformation(char bMsgType,char bPlayerId,char *Data,int cbDataSize)
{
    _MP_SCREEN_PLAYER_INFORMATION *lpMpScreenPlayerInfo;
    lpMpScreenPlayerInfo = (_MP_SCREEN_PLAYER_INFORMATION*)GlobalAlloc(GPTR,sizeof _MP_SCREEN_PLAYER_INFORMATION);

    lpMpScreenPlayerInfo->bMsgType = bMsgType;
    lpMpScreenPlayerInfo->bPlayerId = bPlayerId;

    if(lpMpScreenPlayerInfo->bMsgType==CHAT){
        memcpy(lpMpScreenPlayerInfo->szData,Data,cbDataSize);
    } else {
        lpMpScreenPlayerInfo->dwId = (DWORD)Data;
    }

    ReceivedData((int)lpMpScreenPlayerInfo);
}
